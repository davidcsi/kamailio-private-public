#!KAMAILIO

####### Include definitions #############
include_file "definitions.cfg"

# *** Value defines - IDs used later in config
#!ifdef WITH_MYSQL
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.
#!ifndef DBURL
#!define DBURL "mysql://DB_USER:DB_PASS@DB_HOST/kamailio"
#!endif
#!endif
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif


# - flags
#   FLT_ - per transaction (message) flags
#   FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!ifdef WITH_CDRS
#!define FLT_DIALOG 4
#!endif

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

memdbg=10
memlog=10

# ** Log to rsyslog
log_facility=LOG_LOCAL0

# *** Autoselect sockets
mhomed=1

/* number of SIP routing processes */
children=4

/* uncomment the next line to disable TCP (default on) */
disable_tcp=no

/* Remove the User-Agent to reduce UDP characters */
user_agent_header=""

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
# auto_aliases=no

/* add local domain aliases */
/* Aliases are loaded from the "domain" table

auto_aliases=yes
*/
include_file "aliases.cfg"

/* uncomment and configure the following line if you want Kamailio to
 * bind on a specific interface/port/proto (default bind on all available) */
listen=LISTEN_OUTSIDE_PROTO:LISTEN_OUTSIDE_IF:LISTEN_OUTSIDE_PORT advertise ADVERTISE_IP:LISTEN_OUTSIDE_PORT
#!ifdef WITH_TLS
listen=LISTEN_WSS_PROTO:LISTEN_WSS_IF:LISTEN_WSS_PORT
#!endif

#!ifdef WITH_XMLRPC
listen=tcp:LISTEN_OUTSIDE_IF:XMLRPC_PORT advertise ADVERTISE_IP:LISTEN_OUTSIDE_PORT
#!endif

/* port to listen to (default 5060 for udp, tcp, scrtp, or 5061 for tls)*/
# port=5060

#!ifdef WITH_TLS
enable_tls=yes
tls_port_no=LISTEN_WSS_PORT
#!endif

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

#!ifdef WITH_VOICEMAIL
/* VoiceMail Routing on offline, busy or no answer
 *
 * - by default Voicemail server IP is empty to avoid misrouting */
voicemail.srv_ip = "" desc "VoiceMail IP Address"
voicemail.srv_port = "5060" desc "VoiceMail Port"
#!endif

####### Modules Section ########

/* set paths to location of modules */
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

#!ifdef WITH_MULTITENANT
loadmodule "dialplan.so"
#!endif

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
#!endif


#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_FAIL2BAN
loadmodule "htable.so"
#!ifdef WITH_ANTIFLOOD
loadmodule "pike.so"
#!endif
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_DISPATCHER
loadmodule "dispatcher.so"
#!endif

#!ifdef WITH_RESPONSE_STATS
loadmodule "sqlops.so"
#!endif

#!ifdef WITH_HOMER
loadmodule "siptrace.so"
#!endif

#!ifdef WITH_CDRS
loadmodule "dialog.so"
#!endif

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
loadmodule "sdpops.so"
loadmodule "ipops.so"
#!endif

#!ifdef WITH_WEBSOCKETS
loadmodule "xhttp.so"
loadmodule "websocket.so"
#!endif

#!ifdef WITH_DID_VALIDATE
loadmodule "ndb_redis.so"
#!endif

# ----------------- setting module-specific parameters ---------------

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 2)
modparam("debugger", "log_level_name", "exec")
#!endif

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 5000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 1)
modparam("acc", "report_ack", 1)
modparam("acc", "report_cancels", 1)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra", "src_user=$fU;src_domain=$fd;src_ip=$si;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra", "src_user=$fU;src_domain=$fd;src_ip=$si;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif

# ----- speeddial params -----
#!ifdef WITH_SPEEDDIAL
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
# ----- rtpproxy params -----
#modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")

#!ifdef WITH_RTPENGINE
modparam("rtpengine", "db_url", DBURL)
#!endif

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "TLS_CONFIG")
#!endif


#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_FAIL2BAN
modparam("htable", "htable", "f2b=>size=8;autoexpire=300;")
#!endif

# ----- xmlrpc params -----
#!ifdef WITH_XMLRPC
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DISPATCHER
# ----- dispatcher params -----
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "sock_avp", "$avp(s:dsp_uri_socket)")

modparam("dispatcher", "dstid_avp", "$avp(dsdstid)")
modparam("dispatcher", "attrs_avp", "$avp(dsattrs)")
# PVs for hashing
modparam("dispatcher", "hash_pvar", "$fU@$ci")
# PVs to store results when calling ds_is_from_list
modparam("dispatcher", "setid_pvname", "$var(setid)")
modparam("dispatcher", "attrs_pvname", "$var(attrs)")
# method to probe the gateways
modparam("dispatcher", "ds_ping_method", "OPTIONS")
modparam("dispatcher", "ds_ping_from", "sip:dispatcher@proxy.com")
modparam("dispatcher", "ds_ping_interval", 10)
modparam("dispatcher", "ds_probing_threshold", 1)
modparam("dispatcher", "ds_ping_reply_codes","class=2")
modparam("dispatcher", "ds_probing_mode", 1)
# size of hash table storing data for call load dispatching, power of two
modparam("dispatcher", "ds_hash_size", 10)
# expiration time in seconds to remove the load on a destination if no BYE was received
modparam("dispatcher", "ds_hash_expire", 3600)
# expiration time in seconds to remove the load on a destination if no 200 OK for INVITE was received
# and state updated with ds_load_update
modparam("dispatcher", "ds_hash_initexpire", 60)
modparam("dispatcher", "ds_hash_check_interval", 30)

#!endif

#!ifdef WITH_RESPONSE_STATS
modparam("sqlops","sqlcon","cb=>mysql://DB_USER:DB_PASS@DB_HOST/kamailio")
#!endif

#!ifdef WITH_DID_VALIDATE
modparam("ndb_redis", "server", "name=redis;addr=REDIS_FQDN;port=6379;db=0")
modparam("ndb_redis", "connect_timeout", 500)
#!endif

#!ifdef WITH_ASG_DISPATCHER
modparam("sqlops","sqlcon","asg=>mysql://DB_USER:DB_PASS@DB_HOST/kamailio")
#!endif

#!ifdef WITH_MULTITENANT
modparam("dialplan", "db_url", "mysql://DB_USER:DB_PASS@DB_HOST/kamailio")
modparam("dialplan", "attrs_pvar", "$var(dispatcher_id)")
modparam("dialplan", "fetch_rows", 100)
#!endif

#!ifdef WITH_HOMER
modparam("siptrace", "duplicate_uri", "HOMER_IP")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "hep_version", 3)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
modparam("siptrace", "trace_mode", 1)
#!endif

#!ifdef WITH_CDRS
modparam("dialog", "default_timeout", 43200 )
modparam("dialog", "db_mode", 0 ) # no database writes
modparam("dialog", "dlg_flag", 3 )
modparam("dialog", "hash_size",  4096 )
#!endif

####### Routing Logic ########


/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

#!ifdef WITH_FAIL2BAN
	$var(exp) = $Ts - 900;
    if ($sht(f2b=>$au::last_auth) > $var(exp)) {
        sl_send_reply("403", "Try later");
        xlog("Blocking traffic from $si\n");
        exit;
    } else {
        $sht(f2b=>$au::auth_count) = 0;
    }
#!endif

    xlog("L_ERR", "[REQUEST]: $ci: got $rm\n");

#!ifdef WITH_RTPENGINE
    if is_method("REGISTER") {
        xlog( "L_ERR", "[REQUEST] GOT A REGISTER" );
        if ( proto == wss ) {
            xlog( "L_ERR", "[REQUEST] ALLOW REGISTRATION ATTEMPT FROM $si" );
        } else if ( $si =~ "^172\..*" ) {
            xlog( "L_ERR", "[REQUEST] ALLOW REGISTRATION ATTEMPT FROM $si" );
        } else {
            xlog( "L_ERR", "[REQUEST] NOT ALLOWING REGISTRATION ATTEMPT FROM $si" );
            exit;
        }
    }
#!else
    # Ignore all REGISTER attempts
    if (is_method("REGISTER")) {
        exit;
    }
#!endif

#!ifdef WITH_CDRS
    setflag(FLT_DIALOG); # do dialog manage
    dlg_manage();
#!endif

    # per request initial checks
    route(REQINIT);

    # NAT detection
    route(NATDETECT);

#!ifdef WITH_HOMER
    sip_trace();
    setflag(22);
#!endif

    if (uri==myself) {
        if ((method==OPTIONS) && (! uri=~"sip:.*[@]+.*")) {
            options_reply();
        }
    }

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    # handle retransmissions
    if (!is_method("ACK")) {
        if(t_precheck_trans()) {
            t_check_trans();
            exit;
        }
        t_check_trans();
    }

    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # authentication
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    # account only INVITEs
    if (is_method("INVITE")) {


        if( !($tU =~ "^\+1[0-9]{10}$") && !($tU =~ "^\*TESTCALL$") && !($tU =~ "^1[0-9]{10}$")  && !($tU =~ "^[0-9]{10}$") ) {
            xlog("L_ERR", "[REQUEST_ROUTE] Incoming Called Number didn't pass regex: +1XXXXXXXXXX or *TESTCALL, got $tU\n");
            exit;
        }
#!ifdef WITH_RTPENGINE
        xlog("L_ERR", "[REQUEST_ROUTE] Original RURI protocol is $pr\n");
        if ( $pr=="wss" || $pr=="WSS" ){
            xlog("L_ERR", "[REQUEST_ROUTE] Original RURI protocol is $rP\n");
            $dlg_var(call_type) = "wss";
        } else {
            xlog("L_ERR", "[REQUEST_ROUTE] Original RURI protocol is $rP\n");
            $dlg_var(call_type) = "udp";
        }
#!endif

#!ifdef WITH_DID_VALIDATE
        if(redis_cmd("redis", "GET did:$tU", "r")) {

            xlog("L_ERR", "[REQUEST_ROUTE][DID_VALIDATE] GET did:$tU ===== $redis(r=>type) * $redis(r=>value) \n");

            if ( $redis(r=>value) == "1" ){
                xlog("L_ERR", "[REQUEST_ROUTE][DID_VALIDATE] GET did:$tU\n");
            } else {
                if (!is_ip_rfc1918("$si")) {
                    xlog("L_ERR", "[REQUEST_ROUTE][DID_VALIDATE] Could NOT validate the DID, Declining.\n");
                    sl_send_reply("603","Declined");
                    exit;
                }
            }
        }
#!endif

#!ifdef WITH_SQLSTATS
        sql_query("cb","insert call_stats (datetime, callid, invite) values (now(), '$ci','$TV(Sn)');");
#!endif
        setflag(FLT_ACC); # do accounting
    }

    # dispatch requests to foreign domains
    route(SIPOUT);

    ### requests for my local domains

    # handle presence related requests
    route(PRESENCE);

    # handle registrations
    route(REGISTRAR);

    if ($rU==$null) {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # dispatch destinations to PSTN
    #route(PSTN);

    # use dispatcher
    route(DISPATCH);

    # user location service
    route(LOCATION);
}

onsend_route {
    #if(to_ip==1.2.3.4 && !isflagset(12)){
    xlog("L_ERR", "[onsend_route] Packet going to $du\n" );
    #}
}

# Wrapper for relaying requests
route[RELAY] {

    # enable additional event routes for forwarded requests
    # - serial forking, RTP relaying handling, a.s.o.
    if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
    }
    if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
        if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
    }
    if (is_method("INVITE")) {
        if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
    }

#!ifdef WITH_RTPENGINE
    route(RTPENGINE);
#!endif

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
    # flood detection from same IP and traffic ban for a while
    # be sure you exclude checking trusted peers, such as pstn gateways
    # - local host excluded (e.g., loop to self)
    if(src_ip!=myself) {
        if($sht(ipban=>$si)!=$null) {
            # ip is already blocked
            xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
            exit;
        }
        if (!pike_check_req()) {
            xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
            $sht(ipban=>$si) = 1;
            exit;
        }
    }
    if($ua =~ "friendly-scanner|sipcli") {
        # silent drop for scanners - uncomment next line if want to reply
        # sl_send_reply("200", "OK");
        exit;
    }
#!endif

    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        sl_send_reply("200","Keepalive");
        exit;
    }

    if(!sanity_check("1511", "7")) {
        xlog("Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (!has_totag()) return;

    xlog("L_ERR", "[WITHINDLG] Got method: $rm\n");

#!ifdef WITH_SQLSTATS
    if(is_method("BYE") ) {
        sql_query("cb","update call_stats set bye = '$TV(Sn)' where callid = '$ci';");
    } else if(is_method("ACK") and $rm == "INVITE") {
        sql_query("cb","update call_stats set ok_200_ack = '$TV(Sn)' where callid = '$ci';");
    }
#!endif

    # sequential request withing a dialog should
    # take the path determined by record-routing
    if (loose_route()) {
        route(DLGURI);
        if (is_method("BYE")) {
            setflag(FLT_ACC); # do accounting ...
            setflag(FLT_ACCFAILED); # ... even if the transaction fails
        } else if ( is_method("ACK") ) {
            # ACK is forwarded statelessy
			xlog("L_ERR", "[WITHINDLG] ACK Packet coming from $si:$sp and going to $du\n");
            route(NATMANAGE);
        } else if ( is_method("NOTIFY") ) {
            # Add Record-Route for in-dialog NOTIFY as per RFC 6665.
            record_route();
        }
        route(RELAY);
        exit;
    }

    if (is_method("SUBSCRIBE") && uri == myself) {
        # in-dialog subscribe requests
        route(PRESENCE);
        exit;
    }
    if ( is_method("ACK") ) {
        if ( t_check_trans() ) {
            # no loose-route, but stateful ACK;
            # must be an ACK after a 487
            # or e.g. 404 from upstream server
            route(RELAY);
            exit;
        } else {
            # ACK without matching transaction ... ignore and discard
            exit;
        }
    }
    sl_send_reply("404","Not here");
    exit;
}

# Handle SIP registrations
route[REGISTRAR] {
    if (!is_method("REGISTER")) return;

    if (from_uri!=myself && uri!=myself) {
        xlog("L_ERR", "[REGISTER] Not executing REGISTRAR since the destination is not me\n");
        return;
    }

    if(isflagset(FLT_NATS)) {
        setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
        # do SIP NAT pinging
        setbflag(FLB_NATSIPPING);
#!endif
    }
    if (!save("location")) {
        sl_reply_error();
    }
    exit;
}

# User location service
route[LOCATION] {

#!ifdef WITH_SPEEDDIAL
    # search for short dialing - 2-digit extension
    if($rU=~"^[0-9][0-9]$") {
        if(sd_lookup("speed_dial")) {
            route(SIPOUT);
        }
    }
#!endif

#!ifdef WITH_ALIASDB
    # search in DB-based aliases
    if(alias_db_lookup("dbaliases")) {
        route(SIPOUT);
    }
#!endif

    $avp(oexten) = $rU;
    if (!lookup("location")) {
        $var(rc) = $rc;
        route(TOVOICEMAIL);
        t_newtran();
        switch ($var(rc)) {
            case -1:
            case -3:
                send_reply("404", "Not Found");
                exit;
            case -2:
                send_reply("405", "Method Not Allowed");
                exit;
        }
    }

    # when routing via usrloc, log the missed calls also
    if (is_method("INVITE")) {
        setflag(FLT_ACCMISSED);
    }

    route(RELAY);
    exit;
}

# Presence server processing
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE")) return;

    if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
        route(TOVOICEMAIL);
        # returns here if no voicemail server is configured
        sl_send_reply("404", "No voicemail service");
        exit;
    }

#!ifdef WITH_PRESENCE
    if (!t_newtran()) {
        sl_reply_error();
        exit;
    }

    if(is_method("PUBLISH")) {
        handle_publish();
        t_release();
    } else if(is_method("SUBSCRIBE")) {
        handle_subscribe();
        t_release();
    }
    exit;
#!endif

    # if presence enabled, this part will not be executed
    if (is_method("PUBLISH") || $rU==$null) {
        sl_send_reply("404", "Not here");
        exit;
    }
    return;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH

	if (is_method("INVITE")){
		xlog("L_ERR", "[AUTH]: Exiting AUTH because this is a $rm\n");
		return;
	}

#!ifdef WITH_IPAUTH
    return;
    if((!is_method("REGISTER")) && allow_source_address()) {
        # source IP allowed
        return;
    }
#!endif

    #if (is_method("REGISTER") || from_uri==myself) {
    if (is_method("REGISTER") && from_uri==myself) {
        # authenticate requests
        if (!auth_check("$fd", "subscriber", "1")) {
            auth_challenge("$fd", "0");
            exit;
        }

#!ifdef WITH_AUTO_DISPATCHER
        xlog("L_ERR", "[AUTH]: Expires: $hdr(Expires)\n");
        if ($fU != $null) {
			if ($fU =~ "^freeswitch.*" ) {
				if ($hdr(Expires) > 0) {
                    if (is_ip_rfc1918("$si")) {
    					xlog("L_ERR", "[AUTH] [ASG]: Authentication OK: '$fU' and we got username, doing the auto-dispatcher stuff, source ip is internal $si\n");
                        route(AUTOADD_DISPATCHER);
                    }
				} else {
                    if (is_ip_rfc1918("$si")) {
                        xlog("L_ERR", "[AUTH] [ASG]: Authentication successful for '$fU' and we got username, REMOVING FROM distapcher\n");
                        route(AUTO_REMOVE_FROM_DISPATCHER);
                    }
				}
			}
        }
#!endif

        # user authenticated - remove auth header
        if(!is_method("REGISTER|PUBLISH"))
            consume_credentials();
    }


    # if caller is not local subscriber, then check if it calls
    # a local destination, otherwise deny, not an open relay here
    #if (from_uri!=myself && uri!=myself) {
    #    sl_send_reply("403","Not relaying");
    #    return;
    #}

#!endif
    return;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
    force_rport();
    if (nat_uac_test("19")) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                set_contact_alias();
            }
        }
        setflag(FLT_NATS);
    }
#!endif
    return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
    if (is_request()) {
        if(has_totag()) {
            if(check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
            }
        }
    }
    if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

    if (is_request()) {
        if (!has_totag()) {
            if(t_is_branch_route()) {
                add_rr_param(";nat=yes");
            }
        }
    }
    if (is_reply()) {
        if(isbflagset(FLB_NATB)) {
            if(is_first_hop())
                set_contact_alias();
        }
    }
#!endif
    return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
    if(!isdsturiset()) {
        handle_ruri_alias();
    }
#!endif
    return;
}

# Routing to foreign domains
route[SIPOUT] {
    if (uri==myself) return;

    append_hf("P-hint: outbound\r\n");
    route(RELAY);
    exit;
}

# PSTN GW routing
route[PSTN] {
#!ifdef WITH_PSTN
    # check if PSTN GW IP is defined
    if (strempty($sel(cfg_get.pstn.gw_ip))) {
        xlog("SCRIPT: PSTN routing enabled but pstn.gw_ip not defined\n");
        return;
    }

    # route to PSTN dialed numbers starting with '+' or '00'
    #     (international format)
    # - update the condition to match your dialing rules for PSTN routing
    #if(!($rU=~"^(\+|00)[1-9][0-9]{3,20}$")) return;

    # only local users allowed to call
    #if(from_uri!=myself) {
    #   sl_send_reply("403", "Not Allowed");
    #   exit;
    #}

    if (strempty($sel(cfg_get.pstn.gw_port))) {
        $ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);
    } else {
        $ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip) + ":"
                    + $sel(cfg_get.pstn.gw_port);
    }
    route(RELAY);
    exit;
#!endif

    return;
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC]{
    #if search("^User-Agent:.*xmlrpclib"))
    #  set_reply_close();
    #set_reply_no_connect(); # optional
    if (method=="GET"){
        xmlrpc_reply("200", "xmlrpc all good");
        return;
    }
    dispatch_rpc();

}
#!endif

# Routing to voicemail server
route[TOVOICEMAIL] {
#!ifdef WITH_VOICEMAIL
    if(!is_method("INVITE|SUBSCRIBE")) return;

    # check if VoiceMail server IP is defined
    if (strempty($sel(cfg_get.voicemail.srv_ip))) {
        xlog("SCRIPT: VoiceMail routing enabled but IP not defined\n");
        return;
    }
    if(is_method("INVITE")) {
        if($avp(oexten)==$null) return;

        $ru = "sip:" + $avp(oexten) + "@" + $sel(cfg_get.voicemail.srv_ip)
                + ":" + $sel(cfg_get.voicemail.srv_port);
    } else {
        if($rU==$null) return;

        $ru = "sip:" + $rU + "@" + $sel(cfg_get.voicemail.srv_ip)
                + ":" + $sel(cfg_get.voicemail.srv_port);
    }
    route(RELAY);
    exit;
#!endif

    return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xdbg("new branch [$T_branch_idx] to $ru\n");
    route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xdbg("incoming reply\n");
    if(status=~"[12][0-9][0-9]") {
        route(NATMANAGE);
    }
    xlog("L_ERR", "Got reply: $rs method: $rm\n");

#!ifdef WITH_SQLSTATS
    if(status=~"100") {
        sql_query("cb","update call_stats set trying_100 = '$TV(Sn)' where callid = '$ci';");
    } else if(status =~ "183") {
        sql_query("cb","update call_stats set progress_183 = '$TV(Sn)' where callid = '$ci';");
    } else if(status == "200" && $rm == "INVITE") {
        sql_query("cb","update call_stats set ok_200 = '$TV(Sn)' where callid = '$ci';");
    } else if(status == "200" && $rm == "BYE") {
        sql_query("cb","update call_stats set bye_ack = '$TV(Sn)' where callid = '$ci';");
    }
#!endif

#!ifdef WITH_RTPENGINE
    route(RTPENGINE);
#!endif

}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
    route(NATMANAGE);

    if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_BLOCK401407
    # block call redirect based on 401, 407 replies.
    if (t_check_status("401|407")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_VOICEMAIL
    # serial forking
    # - route to voicemail on busy or no answer (timeout)
    if (t_check_status("486|408")) {
        $du = $null;
        route(TOVOICEMAIL);
        exit;
    }
#!endif
}

route[DISPATCH] {
#!ifdef WITH_DISPATCHER
    # round robin dispatching on gateways group '1'

#!ifdef WITH_MULTITENANT
    dp_match("1", "$ru");
    xlog("[DISPATCH] '$ru' was translated to '$var(dispatcher_id)'\n");
    xlog("[DISPATCH] avp(dsdstid): $avp(dsdstid)\n");

    if(!ds_select_dst("$var(dispatcher_id)", "9"))
#!else
    if(!ds_select_dst("1", "4"))
#!endif
    {
        send_reply("404", "No destination");
        exit;
    } else {
        xlog("[DISPATCH] ds_select_dst was succesful'\n");
    }
    xlog("L_DBG", "--- SCRIPT: going to <$ru> via <$du>\n");
    t_on_failure("RTF_DISPATCH");
    route(RELAY);
    exit;
#!endif
}

# Sample failure route
failure_route[RTF_DISPATCH] {
    if (t_is_canceled()) {
        exit;
    }
    # next DST - only for 500 or local timeout
    if (t_check_status("[45].*") or (t_branch_timeout() and !t_branch_replied()))
    {
        if(ds_next_dst())
        {
            t_on_failure("RTF_DISPATCH");
            route(RELAY);
            exit;
        }
    }
}

route[AUTOADD_DISPATCHER] {
	xlog("L_ERR", "[AUTOADD_DISPATCHER]...\n");
	sql_query("cb", "insert ignore dispatcher (id, setid, destination, flags, priority, attrs, description) values (NULL, 1, 'sip:$si:5080', 0, 0, 'weight=100;maxload=100', '$fU')");
	xlog("L_ERR", "[AUTOADD_DISPATCHER] Affected rows: $sqlrows(cb)\n");
	$var(rows)=$sqlrows(cb);

	if ($sqlrows(cb)>0) {
		ds_reload();
	} else {
		xlog("L_ERR", "[AUTOADD_DISPATCHER] COULD NOT ADD THE NEW GATEWAY WITH IP $si AND USERNAME $fU\n");
	}
}

route[AUTO_REMOVE_FROM_DISPATCHER] {
    sql_query("cb", "delete from dispatcher where destination = 'sip:$si:5080'", "ra");
    xlog("L_ERR", "[AUTO_REMOVE_FROM_DISPATCHER] Affected rows: $sqlrows(cb)\n");
    if ($sqlrows(cb)>0) {
        ds_reload();
    } else {
        xlog("L_ERR", "[AUTO_REMOVE_FROM_DISPATCHER] COULD NOT REMOVE THE NEW GATEWAY WITH IP $si AND USERNAME $fU\n");
    }
    sql_result_free("ra");
}

#!ifdef WITH_WEBSOCKETS
event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif

#!ifdef WITH_WEBSOCKETS
event_route[xhttp:request] {
    // xhttp_reply("200", "OK", "text/html","<html><body>Received HTTP request to $hu from [$si:$sp] with protocol $proto</body></html>");
	#set_reply_close();
	#set_reply_no_connect();
	xlog("L_INFO", "HTTP Request Received\n");

    if ( $Rp != LISTEN_WSS_PORT ) {
            route(XMLRPC);
            exit;
    }

    xlog("L_ERR", "[xhttp:request] Before into the 'Upgarde'\n");
	if ( $hdr(Upgrade) =~ "websocket" && $hdr(Connection) =~ "Upgrade" && $rm =~ "GET" ) {
        xlog("L_WARN", "[xhttp:request] Inside the IF");
		# Validate Host - make sure the client is using the correct
		# alias for WebSockets
		if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
			xlog("L_WARN", "Bad host $hdr(Host)\n");
			xhttp_reply("403", "Forbidden", "", "");
			exit;
		}

		# Optional... validate Origin - make sure the client is from an
		# authorised website.	For example,
		#
		# if ($hdr(Origin) != "https://example.com"
		#	&& $hdr(Origin) != "https://example.com") {
		#	xlog("L_WARN", "Unauthorised client $hdr(Origin)\n");
		#	xhttp_reply("403", "Forbidden", "", "");
		#	exit;
		# }

		# Optional... perform HTTP authentication

		# ws_handle_handshake() exits (no further configuration file
		# processing of the request) when complete.
		if (ws_handle_handshake()) {
			# Optional... cache some information about the
			# successful connection
			exit;
		}
	}

	xhttp_reply("404", "Not Found", "", "");
}
#!endif

#!ifdef WITH_RTPENGINE
route[SET_RTP_DIRECTION] {
    #  If the Source IP is an RFC1918 address, it's coming from an internal endpoint, so the call is going out
    if (is_ip_rfc1918("$si")) {
        $dlg_var(rtp_direction) = "direction=internal direction=external";
    } else {
        $dlg_var(rtp_direction) = "direction=external direction=internal";
    }
}

route[GET_ICE] {
    # If the call type is WSS we leave the ICE, else remove it
    if ( $dlg_var(call_type) == "wss" ) {
        $dlg_var(ice) = " ";
    } else {
        $dlg_var(ice) = "ICE=remove";
    }
}

route[BUILD_RTPENGINE_PARAMETER] {
    route(SET_RTP_DIRECTION);   # returns $dlg_var(rtp_direction)
    if ( is_method("INVITE") ) {
        route(GET_ICE);             # returns $dlg_var(ice)
    }

    $var(rtp_param) = "replace-origin replace-session-connection " + $dlg_var(ice) + " " + $dlg_var(rtp_direction);
    xlog("L_ERR", "[RTPENGINE]: Method $rm status $rs protocol: $dlg_var(call_type) -> $dlg_var(rtp_direction) -> [$dlg_var(ice)]\n");
    xlog("L_ERR", "[RTPENGINE]: Param: [$var(rtp_param)]\n");
    rtpengine_manage($var(rtp_param));
}

route[RTPENGINE] {
    xlog("L_ERR", "[RTPENGINE] We're here\n");

    if ( is_method("INVITE") ) {
        xlog("L_ERR", "[RTPENGINE] It's an INVITE\n");
        if ( sdp_content() ) {
            xlog("L_ERR", "[RTPENGINE] Message has SDP\n");
            route(BUILD_RTPENGINE_PARAMETER);
        }
    }

}
#!endif
